"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const formatName_1 = __importDefault(require("../../graphql/utilities/formatName"));
const buildGlobalFields_1 = require("../../versions/buildGlobalFields");
const buildPaginatedListType_1 = __importDefault(require("../../graphql/schema/buildPaginatedListType"));
function registerGlobals() {
    if (this.config.globals) {
        const { findOne, update, findVersionByID, findVersions, restoreVersion, } = this.graphQL.resolvers.globals;
        Object.keys(this.globals.config).forEach((slug) => {
            const global = this.globals.config[slug];
            const { label, fields, } = global;
            const formattedLabel = (0, formatName_1.default)(label);
            global.graphQL = {};
            global.graphQL.type = this.buildObjectType(formattedLabel, fields, formattedLabel);
            global.graphQL.mutationInputType = new graphql_1.GraphQLNonNull(this.buildMutationInputType(formattedLabel, fields, formattedLabel));
            this.Query.fields[formattedLabel] = {
                type: global.graphQL.type,
                args: {
                    draft: { type: graphql_1.GraphQLBoolean },
                    ...(this.config.localization ? {
                        locale: { type: this.types.localeInputType },
                        fallbackLocale: { type: this.types.fallbackLocaleInputType },
                    } : {}),
                },
                resolve: findOne(global),
            };
            this.Mutation.fields[`update${formattedLabel}`] = {
                type: global.graphQL.type,
                args: {
                    data: { type: global.graphQL.mutationInputType },
                    draft: { type: graphql_1.GraphQLBoolean },
                },
                resolve: update(global),
            };
            if (global.versions) {
                const versionGlobalFields = [
                    ...(0, buildGlobalFields_1.buildVersionGlobalFields)(global),
                    {
                        name: 'id',
                        type: 'text',
                    },
                    {
                        name: 'createdAt',
                        label: 'Created At',
                        type: 'date',
                    },
                    {
                        name: 'updatedAt',
                        label: 'Updated At',
                        type: 'date',
                    },
                ];
                global.graphQL.versionType = this.buildObjectType(`${formattedLabel}Version`, versionGlobalFields, `${formattedLabel}Version`, {});
                this.Query.fields[`version${(0, formatName_1.default)(formattedLabel)}`] = {
                    type: global.graphQL.versionType,
                    args: {
                        id: { type: graphql_1.GraphQLString },
                        ...(this.config.localization ? {
                            locale: { type: this.types.localeInputType },
                            fallbackLocale: { type: this.types.fallbackLocaleInputType },
                        } : {}),
                    },
                    resolve: findVersionByID(global),
                };
                this.Query.fields[`versions${formattedLabel}`] = {
                    type: (0, buildPaginatedListType_1.default)(`versions${(0, formatName_1.default)(formattedLabel)}`, global.graphQL.versionType),
                    args: {
                        where: {
                            type: this.buildWhereInputType(`versions${formattedLabel}`, versionGlobalFields, `versions${formattedLabel}`),
                        },
                        ...(this.config.localization ? {
                            locale: { type: this.types.localeInputType },
                            fallbackLocale: { type: this.types.fallbackLocaleInputType },
                        } : {}),
                        page: { type: graphql_1.GraphQLInt },
                        limit: { type: graphql_1.GraphQLInt },
                        sort: { type: graphql_1.GraphQLString },
                    },
                    resolve: findVersions(global),
                };
                this.Mutation.fields[`restoreVersion${(0, formatName_1.default)(formattedLabel)}`] = {
                    type: global.graphQL.type,
                    args: {
                        id: { type: graphql_1.GraphQLString },
                    },
                    resolve: restoreVersion(global),
                };
            }
        });
    }
}
exports.default = registerGlobals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nbG9iYWxzL2dyYXBocWwvaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFDQUFvRjtBQUNwRixvRkFBNEQ7QUFDNUQsd0VBQTRFO0FBQzVFLHlHQUFpRjtBQUVqRixTQUFTLGVBQWU7SUFDdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUN2QixNQUFNLEVBQ0osT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLGNBQWMsR0FDL0QsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFFbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sRUFDSixLQUFLLEVBQ0wsTUFBTSxHQUNQLEdBQUcsTUFBTSxDQUFDO1lBRVgsTUFBTSxjQUFjLEdBQUcsSUFBQSxvQkFBVSxFQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXpDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQ3hDLGNBQWMsRUFDZCxNQUFNLEVBQ04sY0FBYyxDQUNmLENBQUM7WUFFRixNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLElBQUksd0JBQWMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQy9FLGNBQWMsRUFDZCxNQUFNLEVBQ04sY0FBYyxDQUNmLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHO2dC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