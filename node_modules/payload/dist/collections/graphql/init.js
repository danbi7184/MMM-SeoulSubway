"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_scalars_1 = require("graphql-scalars");
const graphql_1 = require("graphql");
const formatName_1 = __importDefault(require("../../graphql/utilities/formatName"));
const buildPaginatedListType_1 = __importDefault(require("../../graphql/schema/buildPaginatedListType"));
const buildMutationInputType_1 = require("../../graphql/schema/buildMutationInputType");
const buildCollectionFields_1 = require("../../versions/buildCollectionFields");
function registerCollections() {
    const { findVersions, findVersionByID, restoreVersion, create, find, findByID, deleteResolver, update, } = this.graphQL.resolvers.collections;
    const { login, logout, me, init, refresh, forgotPassword, resetPassword, verifyEmail, unlock, } = this.graphQL.resolvers.collections.auth;
    Object.keys(this.collections).forEach((slug) => {
        const collection = this.collections[slug];
        const { config: { labels: { singular, plural, }, fields, timestamps, }, } = collection;
        const singularLabel = (0, formatName_1.default)(singular);
        let pluralLabel = (0, formatName_1.default)(plural);
        // For collections named 'Media' or similar,
        // there is a possibility that the singular name
        // will equal the plural name. Append `all` to the beginning
        // of potential conflicts
        if (singularLabel === pluralLabel) {
            pluralLabel = `all${singularLabel}`;
        }
        collection.graphQL = {};
        const idField = fields.find(({ name }) => name === 'id');
        const idType = (0, buildMutationInputType_1.getCollectionIDType)(collection.config);
        const baseFields = {};
        const whereInputFields = [
            ...fields,
        ];
        if (!idField) {
            baseFields.id = { type: idType };
            whereInputFields.push({
                name: 'id',
                type: 'text',
            });
        }
        if (timestamps) {
            baseFields.createdAt = {
                type: new graphql_1.GraphQLNonNull(graphql_scalars_1.DateTimeResolver),
            };
            baseFields.updatedAt = {
                type: new graphql_1.GraphQLNonNull(graphql_scalars_1.DateTimeResolver),
            };
            whereInputFields.push({
                name: 'createdAt',
                label: 'Created At',
                type: 'date',
            });
            whereInputFields.push({
                name: 'updatedAt',
                label: 'Updated At',
                type: 'date',
            });
        }
        collection.graphQL.type = this.buildObjectType(singularLabel, fields, singularLabel, baseFields);
        collection.graphQL.whereInputType = this.buildWhereInputType(singularLabel, whereInputFields, singularLabel);
        if (collection.config.auth) {
            fields.push({
                name: 'password',
                label: 'Password',
                type: 'text',
                required: true,
            });
        }
        collection.graphQL.mutationInputType = new graphql_1.GraphQLNonNull(this.buildMutationInputType(singularLabel, fields, singularLabel));
        collection.graphQL.updateMutationInputType = new graphql_1.GraphQLNonNull(this.buildMutationInputType(`${singularLabel}Update`, fields.filter((field) => field.name !== 'id'), `${singularLabel}Update`, true));
        this.Query.fields[singularLabel] = {
            type: collection.graphQL.type,
            args: {
                id: { type: idType },
                draft: { type: graphql_1.GraphQLBoolean },
                ...(this.config.localization ? {
                    locale: { type: this.types.localeInputType },
                    fallbackLocale: { type: this.types.fallbackLocaleInputType },
                } : {}),
            },
            resolve: findByID(collection),
        };
        this.Query.fields[pluralLabel] = {
            type: (0, buildPaginatedListType_1.default)(pluralLabel, collection.graphQL.type),
            args: {
                where: { type: collection.graphQL.whereInputType },
                draft: { type: graphql_1.GraphQLBoolean },
                ...(this.config.localization ? {
                    locale: { type: this.types.localeInputType },
                    fallbackLocale: { type: this.types.fallbackLocaleInputType },
                } : {}),
                page: { type: graphql_1.GraphQLInt },
                limit: { type: graphql_1.GraphQLInt },
                sort: { type: graphql_1.GraphQLString },
            },
            resolve: find(collection),
        };
        this.Mutation.fields[`create${singularLabel}`] = {
            type: collection.graphQL.type,
            args: {
                data: { type: collection.graphQL.mutationInputType },
                draft: { type: graphql_1.GraphQLBoolean },
            },
            resolve: create(collection),
        };
        this.Mutation.fields[`update${singularLabel}`] = {
            type: collection.graphQL.type,
            args: {
                id: { type: new graphql_1.GraphQLNonNull(idType) },
                data: { type: collection.graphQL.updateMutationInputType },
                draft: { type: graphql_1.GraphQLBoolean },
                autosave: { type: graphql_1.GraphQLBoolean },
            },
            resolve: update(collection),
        };
        this.Mutation.fields[`delete${singularLabel}`] = {
            type: collection.graphQL.type,
            args: {
                id: { type: new graphql_1.GraphQLNonNull(idType) },
            },
            resolve: deleteResolver(collection),
        };
        if (collection.config.versions) {
            const versionCollectionFields = [
                ...(0, buildCollectionFields_1.buildVersionCollectionFields)(collection.config),
                {
                    name: 'id',
                    type: 'text',
                },
                {
                    name: 'createdAt',
                    label: 'Created At',
                    type: 'date',
                },
                {
                    name: 'updatedAt',
                    label: 'Updated At',
                    type: 'date',
                },
            ];
            collection.graphQL.versionType = this.buildObjectType(`${singularLabel}Version`, versionCollectionFields, `${singularLabel}Version`, {});
            this.Query.fields[`version${(0, formatName_1.default)(singularLabel)}`] = {
                type: collection.graphQL.versionType,
                args: {
                    id: { type: graphql_1.GraphQLString },
                    ...(this.config.localization ? {
                        locale: { type: this.types.localeInputType },
                        fallbackLocale: { type: this.types.fallbackLocaleInputType },
                    } : {}),
                },
                resolve: findVersionByID(collection),
            };
            this.Query.fields[`versions${pluralLabel}`] = {
                type: (0, buildPaginatedListType_1.default)(`versions${(0, formatName_1.default)(pluralLabel)}`, collection.graphQL.versionType),
                args: {
                    where: {
                        type: this.buildWhereInputType(`versions${singularLabel}`, versionCollectionFields, `versions${singularLabel}`),
                    },
                    ...(this.config.localization ? {
                        locale: { type: this.types.localeInputType },
                        fallbackLocale: { type: this.types.fallbackLocaleInputType },
                    } : {}),
                    page: { type: graphql_1.GraphQLInt },
                    limit: { type: graphql_1.GraphQLInt },
                    sort: { type: graphql_1.GraphQLString },
                },
                resolve: findVersions(collection),
            };
            this.Mutation.fields[`restoreVersion${(0, formatName_1.default)(singularLabel)}`] = {
                type: collection.graphQL.type,
                args: {
                    id: { type: graphql_1.GraphQLString },
                },
                resolve: restoreVersion(collection),
            };
        }
        if (collection.config.auth) {
            collection.graphQL.JWT = this.buildObjectType((0, formatName_1.default)(`${slug}JWT`), collection.config.fields.filter((field) => field.saveToJWT).concat([
                {
                    name: 'email',
                    type: 'email',
                    required: true,
                },
                {
                    name: 'collection',
                    type: 'text',
                    required: true,
                },
            ]), (0, formatName_1.default)(`${slug}JWT`));
            this.Query.fields[`me${singularLabel}`] = {
                type: new graphql_1.GraphQLObjectType({
                    name: (0, formatName_1.default)(`${slug}Me`),
                    fields: {
                        token: {
                            type: graphql_1.GraphQLString,
                        },
                        user: {
                            type: collection.graphQL.type,
                        },
                        exp: {
                            type: graphql_1.GraphQLInt,
                        },
                        collection: {
                            type: graphql_1.GraphQLString,
                        },
                    },
                }),
                resolve: me(slug),
            };
            if (collection.config.auth.maxLoginAttempts > 0) {
                this.Mutation.fields[`unlock${singularLabel}`] = {
                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
                    args: {
                        email: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                    },
                    resolve: unlock(collection),
                };
            }
            this.Query.fields[`initialized${singularLabel}`] = {
                type: graphql_1.GraphQLBoolean,
                resolve: init(collection),
            };
            this.Mutation.fields[`login${singularLabel}`] = {
                type: new graphql_1.GraphQLObjectType({
                    name: (0, formatName_1.default)(`${slug}LoginResult`),
                    fields: {
                        token: {
                            type: graphql_1.GraphQLString,
                        },
                        user: {
                            type: collection.graphQL.type,
                        },
                        exp: {
                            type: graphql_1.GraphQLInt,
                        },
                    },
                }),
                args: {
                    email: { type: graphql_1.GraphQLString },
                    password: { type: graphql_1.GraphQLString },
                },
                resolve: login(collection),
            };
            this.Mutation.fields[`logout${singularLabel}`] = {
                type: graphql_1.GraphQLString,
                resolve: logout(collection),
            };
            this.Mutation.fields[`forgotPassword${singularLabel}`] = {
                type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
                args: {
                    email: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
                    disableEmail: { type: graphql_1.GraphQLBoolean },
                    expiration: { type: graphql_1.GraphQLInt },
                },
                resolve: forgotPassword(collection),
            };
            this.Mutation.fields[`resetPassword${singularLabel}`] = {
                type: new graphql_1.GraphQLObjectType({
                    name: (0, formatName_1.default)(`${slug}ResetPassword`),
                    fields: {
                        token: { type: graphql_1.GraphQLString },
                        user: { type: collection.graphQL.type },
                    },
                }),
                args: {
                    token: { type: graphql_1.GraphQLString },
                    password: { type: graphql_1.GraphQLString },
                },
                resolve: resetPassword(collection),
            };
            this.Mutation.fields[`verifyEmail${singularLabel}`] = {
                type: graphql_1.GraphQLBoolean,
                args: {
                    token: { type: graphql_1.GraphQLString },
                },
                resolve: verifyEmail(collection),
            };
            this.Mutation.fields[`refreshToken${singularLabel}`] = {
                type: new graphql_1.GraphQLObjectType({
                    name: (0, formatName_1.default)(`${slug}Refreshed${singularLabel}`),
                    fields: {
                        user: {
                            type: collection.graphQL.JWT,
                        },
                        refreshedToken: {
                            type: graphql_1.GraphQLString,
                        },
                        exp: {
                            type: graphql_1.GraphQLInt,
                        },
                    },
                }),
                args: {
                    token: { type: graphql_1.GraphQLString },
                },
                resolve: refresh(collection),
            };
        }
    });
}
exports.default = registerCollections;
//# sourceMappingURL=data:application/json;base64,