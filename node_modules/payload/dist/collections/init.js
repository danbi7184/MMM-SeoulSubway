"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const mongoose_paginate_v2_1 = __importDefault(require("mongoose-paginate-v2"));
const express_1 = __importDefault(require("express"));
const passport_1 = __importDefault(require("passport"));
const passport_local_mongoose_1 = __importDefault(require("passport-local-mongoose"));
const passport_local_1 = __importDefault(require("passport-local"));
const buildCollectionFields_1 = require("../versions/buildCollectionFields");
const buildQuery_1 = __importDefault(require("../mongoose/buildQuery"));
const apiKey_1 = __importDefault(require("../auth/strategies/apiKey"));
const buildSchema_1 = __importDefault(require("./buildSchema"));
const buildSchema_2 = __importDefault(require("../mongoose/buildSchema"));
const bindCollection_1 = __importDefault(require("./bindCollection"));
const getVersionsModelName_1 = require("../versions/getVersionsModelName");
const LocalStrategy = passport_local_1.default.Strategy;
function registerCollections(ctx) {
    ctx.config.collections = ctx.config.collections.map((collection) => {
        const formattedCollection = collection;
        const schema = (0, buildSchema_1.default)(formattedCollection, ctx.config);
        if (collection.auth) {
            schema.plugin(passport_local_mongoose_1.default, {
                usernameField: 'email',
            });
            const { maxLoginAttempts, lockTime } = collection.auth;
            if (maxLoginAttempts > 0) {
                // eslint-disable-next-line func-names
                schema.methods.incLoginAttempts = function (cb) {
                    // Expired lock, restart count at 1
                    if (this.lockUntil && this.lockUntil < Date.now()) {
                        return this.updateOne({
                            $set: { loginAttempts: 1 },
                            $unset: { lockUntil: 1 },
                        }, cb);
                    }
                    const updates = { $inc: { loginAttempts: 1 } };
                    // Lock the account if at max attempts and not already locked
                    if (this.loginAttempts + 1 >= maxLoginAttempts && !this.isLocked) {
                        updates.$set = { lockUntil: Date.now() + lockTime };
                    }
                    return this.updateOne(updates, cb);
                };
                // eslint-disable-next-line func-names
                schema.methods.resetLoginAttempts = function (cb) {
                    return this.updateOne({
                        $set: { loginAttempts: 0 },
                        $unset: { lockUntil: 1 },
                    }, cb);
                };
            }
        }
        if (collection.versions) {
            const versionModelName = (0, getVersionsModelName_1.getVersionsModelName)(collection);
            const versionSchema = (0, buildSchema_2.default)(ctx.config, (0, buildCollectionFields_1.buildVersionCollectionFields)(collection), {
                disableUnique: true,
                options: {
                    timestamps: true,
                },
            });
            versionSchema.plugin(mongoose_paginate_v2_1.default, { useEstimatedCount: true })
                .plugin(buildQuery_1.default);
            ctx.versions[collection.slug] = mongoose_1.default.model(versionModelName, versionSchema);
        }
        ctx.collections[formattedCollection.slug] = {
            Model: mongoose_1.default.model(formattedCollection.slug, schema),
            config: formattedCollection,
        };
        // If not local, open routes
        if (!ctx.local) {
            const router = express_1.default.Router();
            const { slug } = collection;
            router.all(`/${slug}*`, (0, bindCollection_1.default)(ctx.collections[formattedCollection.slug]));
            const { create, find, update, findByID, findVersions, findVersionByID, restoreVersion, delete: deleteHandler, } = ctx.requestHandlers.collections;
            if (collection.auth) {
                const AuthCollection = ctx.collections[formattedCollection.slug];
                passport_1.default.use(new LocalStrategy(AuthCollection.Model.authenticate()));
                if (collection.auth.useAPIKey) {
                    passport_1.default.use(`${AuthCollection.config.slug}-api-key`, (0, apiKey_1.default)(ctx, AuthCollection));
                }
                const { init, login, logout, refresh, me, registerFirstUser, forgotPassword, resetPassword, verifyEmail, unlock, } = ctx.requestHandlers.collections.auth;
                if (collection.auth.verify) {
                    router
                        .route(`/${slug}/verify/:token`)
                        .post(verifyEmail);
                }
                if (collection.auth.maxLoginAttempts > 0) {
                    router
                        .route(`/${slug}/unlock`)
                        .post(unlock);
                }
                router
                    .route(`/${slug}/init`)
                    .get(init);
                router
                    .route(`/${slug}/login`)
                    .post(login);
                router
                    .route(`/${slug}/logout`)
                    .post(logout);
                router
                    .route(`/${slug}/refresh-token`)
                    .post(refresh);
                router
                    .route(`/${slug}/me`)
                    .get(me);
                router
                    .route(`/${slug}/first-register`)
                    .post(registerFirstUser);
                router
                    .route(`/${slug}/forgot-password`)
                    .post(forgotPassword);
                router
                    .route(`/${slug}/reset-password`)
                    .post(resetPassword);
            }
            if (collection.versions) {
                router.route(`/${slug}/versions`)
                    .get(findVersions);
                router.route(`/${slug}/versions/:id`)
                    .get(findVersionByID)
                    .post(restoreVersion);
            }
            router.route(`/${slug}`)
                .get(find)
                .post(create);
            router.route(`/${slug}/:id`)
                .put(update)
                .get(findByID)
                .delete(deleteHandler);
            ctx.router.use(router);
        }
        return formattedCollection;
    });
}
exports.default = registerCollections;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xsZWN0aW9ucy9pbml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0RBQWdDO0FBQ2hDLGdGQUE0QztBQUM1QyxzREFBOEI7QUFDOUIsd0RBQWdDO0FBQ2hDLHNGQUE0RDtBQUM1RCxvRUFBc0M7QUFFdEMsNkVBQWlGO0FBQ2pGLHdFQUFzRDtBQUN0RCx1RUFBdUQ7QUFDdkQsZ0VBQWtEO0FBQ2xELDBFQUFrRDtBQUNsRCxzRUFBd0Q7QUFHeEQsMkVBQXdFO0FBRXhFLE1BQU0sYUFBYSxHQUFHLHdCQUFRLENBQUMsUUFBUSxDQUFDO0FBRXhDLFNBQXdCLG1CQUFtQixDQUFDLEdBQVk7SUFDdEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBcUMsRUFBRSxFQUFFO1FBQzVGLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO1FBRXZDLE1BQU0sTUFBTSxHQUFHLElBQUEscUJBQXFCLEVBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRFLElBQUksVUFBVSxDQUFDLElBQUksRUFBRTtZQUNuQixNQUFNLENBQUMsTUFBTSxDQUFDLGlDQUFxQixFQUFFO2dCQUNuQyxhQUFhLEVBQUUsT0FBTzthQUN2QixDQUFDLENBQUM7WUFHSCxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztZQUV2RCxJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRTtnQkFPeEIsc0NBQXNDO2dCQUN0QyxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLFVBQWlELEVBQUU7b0JBQ25GLG1DQUFtQztvQkFDbkMsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxD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