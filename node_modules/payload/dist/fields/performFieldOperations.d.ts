import { Payload } from '..';
import { SanitizedCollectionConfig } from '../collections/config/types';
import { SanitizedGlobalConfig } from '../globals/config/types';
import { Operation } from '../types';
import { PayloadRequest } from '../express/types';
import { HookName } from './config/types';
declare type Arguments = {
    data: Record<string, unknown>;
    operation: Operation;
    hook?: HookName;
    req: PayloadRequest;
    overrideAccess: boolean;
    flattenLocales?: boolean;
    unflattenLocales?: boolean;
    originalDoc?: Record<string, unknown>;
    docWithLocales?: Record<string, unknown>;
    id?: string | number;
    showHiddenFields?: boolean;
    depth?: number;
    currentDepth?: number;
    isVersion?: boolean;
    skipValidation?: boolean;
};
export default function performFieldOperations(this: Payload, entityConfig: SanitizedCollectionConfig | SanitizedGlobalConfig, args: Arguments): Promise<any>;
export {};
