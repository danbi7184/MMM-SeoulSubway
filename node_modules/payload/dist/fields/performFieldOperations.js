"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const sanitizeFallbackLocale_1 = __importDefault(require("../localization/sanitizeFallbackLocale"));
const traverseFields_1 = __importDefault(require("./traverseFields"));
const deepCopyObject_1 = __importDefault(require("../utilities/deepCopyObject"));
async function performFieldOperations(entityConfig, args) {
    const { data, originalDoc: fullOriginalDoc, docWithLocales, operation, hook, req, id, req: { payloadAPI, locale, }, overrideAccess, flattenLocales, unflattenLocales = false, showHiddenFields = false, isVersion = false, skipValidation = false, } = args;
    const fullData = (0, deepCopyObject_1.default)(data);
    const fallbackLocale = (0, sanitizeFallbackLocale_1.default)(req.fallbackLocale);
    let depth = 0;
    if (payloadAPI === 'REST' || payloadAPI === 'local') {
        depth = (args.depth || args.depth === 0) ? parseInt(String(args.depth), 10) : this.config.defaultDepth;
        if (depth > this.config.maxDepth)
            depth = this.config.maxDepth;
    }
    const currentDepth = args.currentDepth || 1;
    // Maintain a top-level list of promises
    // so that all async field access / validations / hooks
    // can run in parallel
    const validationPromises = [];
    const accessPromises = [];
    const relationshipPopulations = [];
    const hookPromises = [];
    const unflattenLocaleActions = [];
    const transformActions = [];
    const errors = [];
    // //////////////////////////////////////////
    // Entry point for field validation
    // //////////////////////////////////////////
    (0, traverseFields_1.default)({
        fields: entityConfig.fields,
        data: fullData,
        originalDoc: fullOriginalDoc,
        path: '',
        flattenLocales,
        locale,
        fallbackLocale,
        accessPromises,
        operation,
        overrideAccess,
        req,
        id,
        relationshipPopulations,
        depth,
        currentDepth,
        hook,
        hookPromises,
        fullOriginalDoc,
        fullData,
        validationPromises,
        errors,
        payload: this,
        showHiddenFields,
        unflattenLocales,
        unflattenLocaleActions,
        transformActions,
        docWithLocales,
        isVersion,
        skipValidation,
    });
    if (hook === 'afterRead') {
        transformActions.forEach((action) => action());
    }
    const hookResults = hookPromises.map((promise) => promise());
    await Promise.all(hookResults);
    const validationResults = validationPromises.map((promise) => promise());
    await Promise.all(validationResults);
    if (errors.length > 0) {
        throw new errors_1.ValidationError(errors);
    }
    if (hook === 'beforeChange') {
        transformActions.forEach((action) => action());
    }
    unflattenLocaleActions.forEach((action) => action());
    const accessResults = accessPromises.map((promise) => promise());
    await Promise.all(accessResults);
    const relationshipPopulationResults = relationshipPopulations.map((population) => population());
    await Promise.all(relationshipPopulationResults);
    return fullData;
}
exports.default = performFieldOperations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybUZpZWxkT3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWVsZHMvcGVyZm9ybUZpZWxkT3BlcmF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHNDQUE0QztBQUM1QyxvR0FBNEU7QUFDNUUsc0VBQThDO0FBTTlDLGlGQUF5RDtBQW9CMUMsS0FBSyxVQUFVLHNCQUFzQixDQUFnQixZQUErRCxFQUFFLElBQWU7SUFDbEosTUFBTSxFQUNKLElBQUksRUFDSixXQUFXLEVBQUUsZUFBZSxFQUM1QixjQUFjLEVBQ2QsU0FBUyxFQUNULElBQUksRUFDSixHQUFHLEVBQ0gsRUFBRSxFQUNGLEdBQUcsRUFBRSxFQUNILFVBQVUsRUFDVixNQUFNLEdBQ1AsRUFDRCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGdCQUFnQixHQUFHLEtBQUssRUFDeEIsZ0JBQWdCLEdBQUcsS0FBSyxFQUN4QixTQUFTLEdBQUcsS0FBSyxFQUNqQixjQUFjLEdBQUcsS0FBSyxHQUN2QixHQUFHLElBQUksQ0FBQztJQUVULE1BQU0sUUFBUSxHQUFHLElBQUEsd0JBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUV0QyxNQUFNLGNBQWMsR0FBRyxJQUFBLGdDQUFzQixFQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVsRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFZCxJQUFJLFVBQVUsS0FBSyxNQUFNLElBQUksVUFBVSxLQUFLLE9BQU8sRUFBRTtRQUNuRCxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUV2RyxJQUFJLEtB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