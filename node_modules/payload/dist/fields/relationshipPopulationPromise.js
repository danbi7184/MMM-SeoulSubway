"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./config/types");
const populate = async ({ depth, currentDepth, req, overrideAccess, dataReference, data, field, index, payload, showHiddenFields, }) => {
    const dataToUpdate = dataReference;
    const relation = Array.isArray(field.relationTo) ? data.relationTo : field.relationTo;
    const relatedCollection = payload.collections[relation];
    if (relatedCollection) {
        let idString = Array.isArray(field.relationTo) ? data.value : data;
        if (typeof idString !== 'string' && typeof (idString === null || idString === void 0 ? void 0 : idString.toString) === 'function') {
            idString = idString.toString();
        }
        let populatedRelationship;
        if (depth && currentDepth <= depth) {
            populatedRelationship = await payload.findByID({
                req,
                collection: relatedCollection.config.slug,
                id: idString,
                currentDepth: currentDepth + 1,
                overrideAccess: typeof overrideAccess === 'undefined' ? false : overrideAccess,
                disableErrors: true,
                depth,
                showHiddenFields,
            });
        }
        // If populatedRelationship comes back, update value
        if (populatedRelationship || populatedRelationship === null) {
            if (typeof index === 'number') {
                if (Array.isArray(field.relationTo)) {
                    dataToUpdate[field.name][index].value = populatedRelationship;
                }
                else {
                    dataToUpdate[field.name][index] = populatedRelationship;
                }
            }
            else if (Array.isArray(field.relationTo)) {
                dataToUpdate[field.name].value = populatedRelationship;
            }
            else {
                dataToUpdate[field.name] = populatedRelationship;
            }
        }
    }
};
const relationshipPopulationPromise = ({ data, field, depth, currentDepth, req, overrideAccess, payload, showHiddenFields, }) => async () => {
    const resultingData = data;
    const populateDepth = (0, types_1.fieldHasMaxDepth)(field) && field.maxDepth < depth ? field.maxDepth : depth;
    if ((0, types_1.fieldSupportsMany)(field) && field.hasMany && Array.isArray(data[field.name])) {
        const rowPromises = [];
        data[field.name].forEach((relatedDoc, index) => {
            const rowPromise = async () => {
                if (relatedDoc) {
                    await populate({
                        depth: populateDepth,
                        currentDepth,
                        req,
                        overrideAccess,
                        data: relatedDoc,
                        dataReference: resultingData,
                        field,
                        index,
                        payload,
                        showHiddenFields,
                    });
                }
            };
            rowPromises.push(rowPromise());
        });
        await Promise.all(rowPromises);
    }
    else if (data[field.name]) {
        await populate({
            depth: populateDepth,
            currentDepth,
            req,
            overrideAccess,
            dataReference: resultingData,
            data: data[field.name],
            field,
            payload,
            showHiddenFields,
        });
    }
};
exports.default = relationshipPopulationPromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwUG9wdWxhdGlvblByb21pc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmllbGRzL3JlbGF0aW9uc2hpcFBvcHVsYXRpb25Qcm9taXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMENBQXFHO0FBZ0JyRyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsRUFDdEIsS0FBSyxFQUNMLFlBQVksRUFDWixHQUFHLEVBQ0gsY0FBYyxFQUNkLGFBQWEsRUFDYixJQUFJLEVBQ0osS0FBSyxFQUNMLEtBQUssRUFDTCxPQUFPLEVBQ1AsZ0JBQWdCLEdBQ0gsRUFBRSxFQUFFO0lBQ2pCLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztJQUVuQyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLFVBQXFCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDbEcsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXhELElBQUksaUJBQWlCLEVBQUU7UUFDckIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUVuRSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUEsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLFFBQVEsQ0FBQSxLQUFLLFVBQVUsRUFBRTtZQUM1RSxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxxQkFBcUIsQ0FBQztRQUUxQixJQUFJLEtBQUssSUFBSSxZQUFZLElBQUksS0FBSyxFQUFFO1lBQ2xDLHFCQUFx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