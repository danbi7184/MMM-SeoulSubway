"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.point = exports.blocks = exports.radio = exports.select = exports.array = exports.relationship = exports.upload = exports.date = exports.checkbox = exports.richText = exports.code = exports.textarea = exports.email = exports.password = exports.text = exports.number = void 0;
const defaultValue_1 = __importDefault(require("./richText/defaultValue"));
const canUseDOM_1 = __importDefault(require("../utilities/canUseDOM"));
const index_1 = __importDefault(require("../index"));
const defaultMessage = 'This field is required.';
const number = (value, { required, min, max }) => {
    const parsedValue = parseInt(value, 10);
    if ((value && typeof parsedValue !== 'number') || (required && Number.isNaN(parsedValue))) {
        return 'Please enter a valid number.';
    }
    if (max && parsedValue > max) {
        return `"${value}" is greater than the max allowed value of ${max}.`;
    }
    if (min && parsedValue < min) {
        return `"${value}" is less than the min allowed value of ${min}.`;
    }
    if (required && typeof parsedValue !== 'number') {
        return defaultMessage;
    }
    return true;
};
exports.number = number;
const text = (value, { minLength, maxLength, required }) => {
    if (value && maxLength && value.length > maxLength) {
        return `This value must be shorter than the max length of ${maxLength} characters.`;
    }
    if (value && minLength && (value === null || value === void 0 ? void 0 : value.length) < minLength) {
        return `This value must be longer than the minimum length of ${minLength} characters.`;
    }
    if (required) {
        if (typeof value !== 'string' || (value === null || value === void 0 ? void 0 : value.length) === 0) {
            return defaultMessage;
        }
    }
    return true;
};
exports.text = text;
const password = (value, { required, maxLength, minLength }) => {
    if (value && maxLength && value.length > maxLength) {
        return `This value must be shorter than the max length of ${maxLength} characters.`;
    }
    if (value && minLength && value.length < minLength) {
        return `This value must be longer than the minimum length of ${minLength} characters.`;
    }
    if (required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.password = password;
const email = (value, { required }) => {
    if ((value && !/\S+@\S+\.\S+/.test(value))
        || (!value && required)) {
        return 'Please enter a valid email address.';
    }
    return true;
};
exports.email = email;
const textarea = (value, { required, maxLength, minLength, }) => {
    if (value && maxLength && value.length > maxLength) {
        return `This value must be shorter than the max length of ${maxLength} characters.`;
    }
    if (value && minLength && value.length < minLength) {
        return `This value must be longer than the minimum length of ${minLength} characters.`;
    }
    if (required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.textarea = textarea;
const code = (value, { required }) => {
    if (required && value === undefined) {
        return defaultMessage;
    }
    return true;
};
exports.code = code;
const richText = (value, { required }) => {
    if (required) {
        const stringifiedDefaultValue = JSON.stringify(defaultValue_1.default);
        if (value && JSON.stringify(value) !== stringifiedDefaultValue)
            return true;
        return 'This field is required.';
    }
    return true;
};
exports.richText = richText;
const checkbox = (value, { required }) => {
    if ((value && typeof value !== 'boolean')
        || (required && typeof value !== 'boolean')) {
        return 'This field can only be equal to true or false.';
    }
    return true;
};
exports.checkbox = checkbox;
const date = (value, { required }) => {
    if (value && !isNaN(Date.parse(value.toString()))) { /* eslint-disable-line */
        return true;
    }
    if (value) {
        return `"${value}" is not a valid date.`;
    }
    if (required) {
        return defaultMessage;
    }
    return true;
};
exports.date = date;
const validateFilterOptions = async (value, { filterOptions, id, user, data, siblingData, relationTo }) => {
    if (!canUseDOM_1.default && typeof filterOptions !== 'undefined' && value) {
        const options = {};
        const collections = typeof relationTo === 'string' ? [relationTo] : relationTo;
        const values = Array.isArray(value) ? value : [value];
        await Promise.all(collections.map(async (collection) => {
            const optionFilter = typeof filterOptions === 'function' ? filterOptions({
                id,
                data,
                siblingData,
                user,
                relationTo: collection,
            }) : filterOptions;
            const valueIDs = [];
            values.forEach((val) => {
                if (typeof val === 'object' && (val === null || val === void 0 ? void 0 : val.value)) {
                    valueIDs.push(val.value);
                }
                if (typeof val === 'string' || typeof val === 'number') {
                    valueIDs.push(val);
                }
            });
            const result = await index_1.default.find({
                collection,
                depth: 0,
                where: {
                    and: [
                        { id: { in: valueIDs } },
                        optionFilter,
                    ],
                },
            });
            options[collection] = result.docs.map((doc) => doc.id);
        }));
        const invalidRelationships = values.filter((val) => {
            let collection;
            let requestedID;
            if (typeof relationTo === 'string') {
                collection = relationTo;
                if (typeof val === 'string' || typeof val === 'number') {
                    requestedID = val;
                }
            }
            if (Array.isArray(relationTo) && typeof val === 'object' && (val === null || val === void 0 ? void 0 : val.relationTo)) {
                collection = val.relationTo;
                requestedID = val.value;
            }
            return options[collection].indexOf(requestedID) === -1;
        });
        if (invalidRelationships.length > 0) {
            return invalidRelationships.reduce((err, invalid, i) => {
                return `${err} ${JSON.stringify(invalid)}${invalidRelationships.length === i + 1 ? ',' : ''} `;
            }, 'This field has the following invalid selections:');
        }
        return true;
    }
    return true;
};
const upload = (value, options) => {
    if (!value && options.required) {
        return defaultMessage;
    }
    return validateFilterOptions(value, options);
};
exports.upload = upload;
const relationship = async (value, options) => {
    if ((!value || (Array.isArray(value) && value.length === 0)) && options.required) {
        return defaultMessage;
    }
    return validateFilterOptions(value, options);
};
exports.relationship = relationship;
const array = (value, { minRows, maxRows, required }) => {
    if (minRows && value < minRows) {
        return `This field requires at least ${minRows} row(s).`;
    }
    if (maxRows && value > maxRows) {
        return `This field requires no more than ${maxRows} row(s).`;
    }
    if (!value && required) {
        return 'This field requires at least one row.';
    }
    return true;
};
exports.array = array;
const select = (value, { options, hasMany, required }) => {
    var _a;
    if (Array.isArray(value) && value.some((input) => !options.some((option) => (option === input || (typeof option !== 'string' && (option === null || option === void 0 ? void 0 : option.value) === input))))) {
        return 'This field has an invalid selection';
    }
    if (typeof value === 'string' && !options.some((option) => (option === value || (typeof option !== 'string' && option.value === value)))) {
        return 'This field has an invalid selection';
    }
    if (required && ((typeof value === 'undefined' || value === null) || (hasMany && Array.isArray(value) && ((_a = value) === null || _a === void 0 ? void 0 : _a.length) === 0))) {
        return defaultMessage;
    }
    return true;
};
exports.select = select;
const radio = (value, { options, required }) => {
    const stringValue = String(value);
    if ((typeof value !== 'undefined' || !required) && (options.find((option) => String(typeof option !== 'string' && (option === null || option === void 0 ? void 0 : option.value)) === stringValue)))
        return true;
    return defaultMessage;
};
exports.radio = radio;
const blocks = (value, { maxRows, minRows, required }) => {
    if (minRows && value < minRows) {
        return `This field requires at least ${minRows} row(s).`;
    }
    if (maxRows && value > maxRows) {
        return `This field requires no more than ${maxRows} row(s).`;
    }
    if (!value && required) {
        return 'This field requires at least one row.';
    }
    return true;
};
exports.blocks = blocks;
const point = (value = ['', ''], { required }) => {
    const lng = parseFloat(String(value[0]));
    const lat = parseFloat(String(value[1]));
    if (required && ((value[0] && value[1] && typeof lng !== 'number' && typeof lat !== 'number')
        || (Number.isNaN(lng) || Number.isNaN(lat))
        || (Array.isArray(value) && value.length !== 2))) {
        return 'This field requires two numbers';
    }
    if ((value[1] && Number.isNaN(lng)) || (value[0] && Number.isNaN(lat))) {
        return 'This field has an invalid input';
    }
    return true;
};
exports.point = point;
exports.default = {
    number: exports.number,
    text: exports.text,
    password: exports.password,
    email: exports.email,
    textarea: exports.textarea,
    code: exports.code,
    richText: exports.richText,
    checkbox: exports.checkbox,
    date: exports.date,
    upload: exports.upload,
    relationship: exports.relationship,
    array: exports.array,
    select: exports.select,
    radio: exports.radio,
    blocks: exports.blocks,
    point: exports.point,
};
//# sourceMappingURL=data:application/json;base64,