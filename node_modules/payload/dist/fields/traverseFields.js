"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validationPromise_1 = __importDefault(require("./validationPromise"));
const accessPromise_1 = __importDefault(require("./accessPromise"));
const hookPromise_1 = __importDefault(require("./hookPromise"));
const types_1 = require("./config/types");
const relationshipPromise_1 = __importDefault(require("./richText/relationshipPromise"));
const traverseFields = (args) => {
    const { fields, data = {}, originalDoc = {}, path, flattenLocales, locale, fallbackLocale, accessPromises, operation, overrideAccess, req, id, relationshipPopulations, depth, currentDepth, hook, hookPromises, fullOriginalDoc, fullData, validationPromises, errors, payload, showHiddenFields, unflattenLocaleActions, unflattenLocales, transformActions, docWithLocales = {}, skipValidation, isVersion, } = args;
    fields.forEach((field) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const dataCopy = data;
        if (hook === 'afterRead') {
            if (field.type === 'group') {
                // Fill groups with empty objects so fields with hooks within groups can populate
                // themselves virtually as necessary
                if (typeof data[field.name] === 'undefined' && typeof originalDoc[field.name] === 'undefined') {
                    data[field.name] = {};
                }
            }
            if ((0, types_1.fieldAffectsData)(field) && field.hidden && typeof data[field.name] !== 'undefined' && !showHiddenFields) {
                delete data[field.name];
            }
            if (field.type === 'point') {
                transformActions.push(() => {
                    var _a;
                    if (((_a = data[field.name]) === null || _a === void 0 ? void 0 : _a.coordinates) && Array.isArray(data[field.name].coordinates) && data[field.name].coordinates.length === 2) {
                        data[field.name] = data[field.name].coordinates;
                    }
                });
            }
        }
        if ((field.type === 'upload' || field.type === 'relationship')
            && (data[field.name] === '' || data[field.name] === 'none' || data[field.name] === 'null')) {
            if (field.type === 'relationship' && field.hasMany === true) {
                dataCopy[field.name] = [];
            }
            else {
                dataCopy[field.name] = null;
            }
        }
        if (field.type === 'relationship' && field.hasMany && (data[field.name] === '' || data[field.name] === 'none' || data[field.name] === 'null' || data[field.name] === null)) {
            dataCopy[field.name] = [];
        }
        if (field.type === 'number' && typeof data[field.name] === 'string') {
            const trimmed = data[field.name].trim();
            dataCopy[field.name] = (trimmed.length === 0) ? null : parseFloat(trimmed);
        }
        if ((0, types_1.fieldAffectsData)(field) && field.name === 'id') {
            if (field.type === 'number' && typeof data[field.name] === 'string') {
                dataCopy[field.name] = parseFloat(data[field.name]);
            }
            if (field.type === 'text' && typeof ((_a = data[field.name]) === null || _a === void 0 ? void 0 : _a.toString) === 'function' && typeof data[field.name] !== 'string') {
                dataCopy[field.name] = dataCopy[field.name].toString();
            }
        }
        if (field.type === 'checkbox') {
            if (data[field.name] === 'true')
                dataCopy[field.name] = true;
            if (data[field.name] === 'false')
                dataCopy[field.name] = false;
            if (data[field.name] === '')
                dataCopy[field.name] = false;
        }
        if (field.type === 'richText') {
            if (typeof data[field.name] === 'string') {
                try {
                    const richTextJSON = JSON.parse(data[field.name]);
                    dataCopy[field.name] = richTextJSON;
                }
                catch {
                    // Disregard this data as it is not valid.
                    // Will be reported to user by field validation
                }
            }
            if (((((_c = (_b = field.admin) === null || _b === void 0 ? void 0 : _b.elements) === null || _c === void 0 ? void 0 : _c.includes('relationship')) || ((_e = (_d = field.admin) === null || _d === void 0 ? void 0 : _d.elements) === null || _e === void 0 ? void 0 : _e.includes('upload'))) || !((_f = field === null || field === void 0 ? void 0 : field.admin) === null || _f === void 0 ? void 0 : _f.elements)) && hook === 'afterRead') {
                relationshipPopulations.push((0, relationshipPromise_1.default)({
                    req,
                    data,
                    payload,
                    overrideAccess,
                    depth,
                    field,
                    currentDepth,
                    showHiddenFields,
                }));
            }
        }
        const hasLocalizedValue = (0, types_1.fieldAffectsData)(field)
            && (typeof (data === null || data === void 0 ? void 0 : data[field.name]) === 'object' && (data === null || data === void 0 ? void 0 : data[field.name]) !== null)
            && field.name
            && field.localized
            && locale !== 'all'
            && flattenLocales;
        if (hasLocalizedValue) {
            let localizedValue = data[field.name][locale];
            if (typeof localizedValue === 'undefined' && fallbackLocale)
                localizedValue = data[field.name][fallbackLocale];
            if (typeof localizedValue === 'undefined' && field.type === 'group')
                localizedValue = {};
            if (typeof localizedValue === 'undefined')
                localizedValue = null;
            dataCopy[field.name] = localizedValue;
        }
        if ((0, types_1.fieldAffectsData)(field) && field.localized && unflattenLocales) {
            unflattenLocaleActions.push(() => {
                const localeData = payload.config.localization.locales.reduce((locales, localeID) => {
                    var _a, _b, _c;
                    let valueToSet;
                    if (localeID === locale) {
                        if (typeof data[field.name] !== 'undefined') {
                            valueToSet = data[field.name];
                        }
                        else if ((_a = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _a === void 0 ? void 0 : _a[localeID]) {
                            valueToSet = (_b = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _b === void 0 ? void 0 : _b[localeID];
                        }
                    }
                    else {
                        valueToSet = (_c = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _c === void 0 ? void 0 : _c[localeID];
                    }
                    if (typeof valueToSet !== 'undefined') {
                        return {
                            ...locales,
                            [localeID]: valueToSet,
                        };
                    }
                    return locales;
                }, {});
                // If there are locales with data, set the data
                if (Object.keys(localeData).length > 0) {
                    data[field.name] = localeData;
                }
            });
        }
        if ((0, types_1.fieldAffectsData)(field)) {
            accessPromises.push(() => (0, accessPromise_1.default)({
                data,
                fullData,
                originalDoc,
                field,
                operation,
                overrideAccess,
                req,
                id,
                relationshipPopulations,
                depth,
                currentDepth,
                hook,
                payload,
                showHiddenFields,
            }));
            hookPromises.push(() => (0, hookPromise_1.default)({
                data,
                field,
                hook,
                req,
                operation,
                fullOriginalDoc,
                fullData,
                flattenLocales,
                isVersion,
            }));
        }
        const passesCondition = (((_g = field.admin) === null || _g === void 0 ? void 0 : _g.condition) && hook === 'beforeChange') ? field.admin.condition(fullData, data) : true;
        const skipValidationFromHere = skipValidation || !passesCondition;
        if ((0, types_1.fieldHasSubFields)(field)) {
            if (!(0, types_1.fieldAffectsData)(field)) {
                traverseFields({
                    ...args,
                    fields: field.fields,
                    skipValidation: skipValidationFromHere,
                });
            }
            else if ((0, types_1.fieldIsArrayType)(field)) {
                if (Array.isArray(data[field.name])) {
                    for (let i = 0; i < data[field.name].length; i += 1) {
                        if (typeof (data[field.name][i]) === 'undefined') {
                            data[field.name][i] = {};
                        }
                        traverseFields({
                            ...args,
                            fields: field.fields,
                            data: data[field.name][i] || {},
                            originalDoc: (_h = originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === null || _h === void 0 ? void 0 : _h[i],
                            docWithLocales: (_j = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _j === void 0 ? void 0 : _j[i],
                            path: `${path}${field.name}.${i}.`,
                            skipValidation: skipValidationFromHere,
                            showHiddenFields,
                        });
                    }
                }
            }
            else {
                traverseFields({
                    ...args,
                    fields: field.fields,
                    data: data[field.name],
                    originalDoc: originalDoc[field.name],
                    docWithLocales: docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name],
                    path: `${path}${field.name}.`,
                    skipValidation: skipValidationFromHere,
                    showHiddenFields,
                });
            }
        }
        if ((0, types_1.fieldIsBlockType)(field)) {
            if (Array.isArray(data[field.name])) {
                data[field.name].forEach((rowData, i) => {
                    var _a, _b;
                    const block = field.blocks.find((blockType) => blockType.slug === rowData.blockType);
                    if (block) {
                        traverseFields({
                            ...args,
                            fields: block.fields,
                            data: rowData || {},
                            originalDoc: (_a = originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === null || _a === void 0 ? void 0 : _a[i],
                            docWithLocales: (_b = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _b === void 0 ? void 0 : _b[i],
                            path: `${path}${field.name}.${i}.`,
                            skipValidation: skipValidationFromHere,
                            showHiddenFields,
                        });
                    }
                });
            }
        }
        if (hook === 'beforeChange' && (0, types_1.fieldAffectsData)(field)) {
            const updatedData = data;
            if ((data === null || data === void 0 ? void 0 : data[field.name]) === undefined && (originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === undefined && field.defaultValue) {
                updatedData[field.name] = field.defaultValue;
            }
            if (field.type === 'relationship' || field.type === 'upload') {
                if (Array.isArray(field.relationTo)) {
                    if (Array.isArray(dataCopy[field.name])) {
                        dataCopy[field.name].forEach((relatedDoc, i) => {
                            const relatedCollection = payload.config.collections.find((collection) => collection.slug === relatedDoc.relationTo);
                            const relationshipIDField = relatedCollection.fields.find((collectionField) => (0, types_1.fieldAffectsData)(collectionField) && collectionField.name === 'id');
                            if ((relationshipIDField === null || relationshipIDField === void 0 ? void 0 : relationshipIDField.type) === 'number') {
                                dataCopy[field.name][i] = { ...relatedDoc, value: parseFloat(relatedDoc.value) };
                            }
                        });
                    }
                    if (field.type === 'relationship' && field.hasMany !== true && ((_k = dataCopy[field.name]) === null || _k === void 0 ? void 0 : _k.relationTo)) {
                        const relatedCollection = payload.config.collections.find((collection) => collection.slug === dataCopy[field.name].relationTo);
                        const relationshipIDField = relatedCollection.fields.find((collectionField) => (0, types_1.fieldAffectsData)(collectionField) && collectionField.name === 'id');
                        if ((relationshipIDField === null || relationshipIDField === void 0 ? void 0 : relationshipIDField.type) === 'number') {
                            dataCopy[field.name] = { ...dataCopy[field.name], value: parseFloat(dataCopy[field.name].value) };
                        }
                    }
                }
                else {
                    if (Array.isArray(dataCopy[field.name])) {
                        dataCopy[field.name].forEach((relatedDoc, i) => {
                            const relatedCollection = payload.config.collections.find((collection) => collection.slug === field.relationTo);
                            const relationshipIDField = relatedCollection.fields.find((collectionField) => (0, types_1.fieldAffectsData)(collectionField) && collectionField.name === 'id');
                            if ((relationshipIDField === null || relationshipIDField === void 0 ? void 0 : relationshipIDField.type) === 'number') {
                                dataCopy[field.name][i] = parseFloat(relatedDoc);
                            }
                        });
                    }
                    if (field.type === 'relationship' && field.hasMany !== true && dataCopy[field.name]) {
                        const relatedCollection = payload.config.collections.find((collection) => collection.slug === field.relationTo);
                        const relationshipIDField = relatedCollection.fields.find((collectionField) => (0, types_1.fieldAffectsData)(collectionField) && collectionField.name === 'id');
                        if ((relationshipIDField === null || relationshipIDField === void 0 ? void 0 : relationshipIDField.type) === 'number') {
                            dataCopy[field.name] = parseFloat(dataCopy[field.name]);
                        }
                    }
                }
            }
            if (field.type === 'point' && data[field.name]) {
                transformActions.push(() => {
                    if (Array.isArray(data[field.name]) && data[field.name][0] !== null && data[field.name][1] !== null) {
                        data[field.name] = {
                            type: 'Point',
                            coordinates: [
                                parseFloat(data[field.name][0]),
                                parseFloat(data[field.name][1]),
                            ],
                        };
                    }
                });
            }
            if (field.type === 'array' || field.type === 'blocks') {
                const hasRowsOfNewData = Array.isArray(data[field.name]);
                const newRowCount = hasRowsOfNewData ? data[field.name].length : undefined;
                // Handle cases of arrays being intentionally set to 0
                if (data[field.name] === '0' || data[field.name] === 0 || data[field.name] === null) {
                    updatedData[field.name] = [];
                }
                const hasRowsOfExistingData = Array.isArray(originalDoc[field.name]);
                const existingRowCount = hasRowsOfExistingData ? originalDoc[field.name].length : 0;
                validationPromises.push(() => (0, validationPromise_1.default)({
                    errors,
                    hook,
                    data: { [field.name]: newRowCount },
                    fullData,
                    originalDoc: { [field.name]: existingRowCount },
                    fullOriginalDoc,
                    field,
                    path,
                    skipValidation: skipValidationFromHere,
                    user: req.user,
                    operation,
                    id,
                }));
            }
            else if ((0, types_1.fieldAffectsData)(field)) {
                validationPromises.push(() => (0, validationPromise_1.default)({
                    errors,
                    hook,
                    data,
                    fullData,
                    originalDoc,
                    fullOriginalDoc,
                    field,
                    path,
                    skipValidation: skipValidationFromHere,
                    user: req.user,
                    operation,
                    id,
                }));
            }
        }
    });
};
exports.default = traverseFields;
//# sourceMappingURL=data:application/json;base64,