"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const executeHook = async ({ currentHook, fullOriginalDoc, fullData, data, operation, req, value, }) => {
    let hookedValue = await currentHook({
        value,
        originalDoc: fullOriginalDoc,
        data: fullData,
        siblingData: data,
        operation,
        req,
    });
    if (typeof hookedValue === 'undefined') {
        hookedValue = value;
    }
    return hookedValue;
};
const hookPromise = async (args) => {
    const { field, hook, req, flattenLocales, data, } = args;
    if (field.hooks && field.hooks[hook]) {
        await field.hooks[hook].reduce(async (priorHook, currentHook) => {
            await priorHook;
            const shouldRunHookOnAllLocales = hook === 'afterRead'
                && field.localized
                && (req.locale === 'all' || !flattenLocales)
                && typeof data[field.name] === 'object';
            if (shouldRunHookOnAllLocales) {
                const hookPromises = Object.entries(data[field.name]).map(([locale, value]) => (async () => {
                    const hookedValue = await executeHook({
                        ...args,
                        currentHook,
                        value,
                    });
                    if (hookedValue !== undefined) {
                        data[field.name][locale] = hookedValue;
                    }
                })());
                await Promise.all(hookPromises);
            }
            else {
                const hookedValue = await executeHook({
                    ...args,
                    value: data[field.name],
                    currentHook,
                });
                if (hookedValue !== undefined) {
                    data[field.name] = hookedValue;
                }
            }
        }, Promise.resolve());
    }
};
exports.default = hookPromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va1Byb21pc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmllbGRzL2hvb2tQcm9taXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBcUJBLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxFQUN6QixXQUFXLEVBQ1gsZUFBZSxFQUNmLFFBQVEsRUFDUixJQUFJLEVBQ0osU0FBUyxFQUNULEdBQUcsRUFDSCxLQUFLLEdBQ2dCLEVBQUUsRUFBRTtJQUN6QixJQUFJLFdBQVcsR0FBRyxNQUFNLFdBQVcsQ0FBQztRQUNsQyxLQUFLO1FBQ0wsV0FBVyxFQUFFLGVBQWU7UUFDNUIsSUFBSSxFQUFFLFFBQVE7UUFDZCxXQUFXLEVBQUUsSUFBSTtRQUNqQixTQUFTO1FBQ1QsR0FBRztLQUNKLENBQUMsQ0FBQztJQUVILElBQUksT0FBTyxXQUFXLEtBQUssV0FBVyxFQUFFO1FBQ3RDLFdBQVcsR0FBRyxLQUFLLENBQUM7S0FDckI7SUFFRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBZSxFQUFpQixFQUFFO0lBQzNELE1BQU0sRUFDSixLQUFLLEVBQ0wsSUFBSSxFQUNKLEdBQUcsRUFDSCxjQUFjLEVBQ2QsSUFBSSxHQUNMLEdBQUcsSUFBSSxDQUFDO0lBRVQsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQzlELE1BQU0sU0FBUyxDQUFDO1lBRWhCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxLQUFLLFdBQVc7bUJBQ2pELEtBQUssQ0FBQyxTQUFTO21CQUNmLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUM7bUJBQ3pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLENBQUM7WUFFMUMsSUFBSSx5QkFBeUIsRUFBRTtnQkFDN0IsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7b0JBQ3pGLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDO3dCQUNwQyxHQUFHLElBQUk7d0JBQ1AsV0FBVzt3QkFDWCxLQUFLO3FCQUNOLENBQUMsQ0FBQztvQkFFSCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7d0JBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDO3FCQUN4QztnQkFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRU4sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDO29CQUNwQyxHQUFHLElBQUk7b0JBQ1AsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO29CQUN2QixXQUFXO2lCQUNaLENBQUMsQ0FBQztnQkFFSCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7b0JBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDO2lCQUNoQzthQUNGO1FBQ0gsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsV0FBVyxDQUFDIn0=