"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_type_json_1 = require("graphql-type-json");
const graphql_1 = require("graphql");
const graphql_scalars_1 = require("graphql-scalars");
function registerPreferences() {
    const { findOne, update, delete: deleteOperation, } = this.operations.preferences;
    const valueType = graphql_type_json_1.GraphQLJSON;
    const preferenceType = new graphql_1.GraphQLObjectType({
        name: 'Preference',
        fields: {
            key: {
                type: (0, graphql_1.GraphQLNonNull)(graphql_1.GraphQLString),
            },
            value: { type: valueType },
            createdAt: { type: new graphql_1.GraphQLNonNull(graphql_scalars_1.DateTimeResolver) },
            updatedAt: { type: new graphql_1.GraphQLNonNull(graphql_scalars_1.DateTimeResolver) },
        },
    });
    this.Query.fields.Preference = {
        type: preferenceType,
        args: {
            key: { type: graphql_1.GraphQLString },
        },
        resolve: (_, { key }, context) => {
            const { user } = context.req;
            return findOne({ key, user, req: context.req });
        },
    };
    this.Mutation.fields.updatePreference = {
        type: preferenceType,
        args: {
            key: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
            value: { type: valueType },
        },
        resolve: (_, { key, value }, context) => {
            const { user } = context.req;
            return update({ key, user, req: context.req, value });
        },
    };
    this.Mutation.fields.deletePreference = {
        type: preferenceType,
        args: {
            key: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString) },
        },
        resolve: (_, { key }, context) => {
            const { user } = context.req;
            return deleteOperation({ key, user, req: context.req });
        },
    };
}
exports.default = registerPreferences;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmVmZXJlbmNlcy9ncmFwaHFsL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBZ0Q7QUFDaEQscUNBSWlCO0FBQ2pCLHFEQUFtRDtBQUVuRCxTQUFTLG1CQUFtQjtJQUMxQixNQUFNLEVBQ0osT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxHQUN6QyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO0lBR2hDLE1BQU0sU0FBUyxHQUFHLCtCQUFXLENBQUM7SUFFOUIsTUFBTSxjQUFjLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQztRQUMzQyxJQUFJLEVBQUUsWUFBWTtRQUNsQixNQUFNLEVBQUU7WUFDTixHQUFHLEVBQUU7Z0JBQ0gsSUFBSSxFQUFFLElBQUEsd0JBQWMsRUFBQyx1QkFBYSxDQUFDO2FBQ3BDO1lBQ0QsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMxQixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSx3QkFBYyxDQUFDLGtDQUFnQixDQUFDLEVBQUU7WUFDekQsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksd0JBQWMsQ0FBQyxrQ0FBZ0IsQ0FBQyxFQUFFO1NBQzFEO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHO1FBQzdCLElBQUksRUFBRSxjQUFjO1FBQ3BCLElBQUksRUFBRTtZQUNKLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSx1QkFBYSxFQUFFO1NBQzdCO1FBQ0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDN0IsT0FBTyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRCxDQUFDO0tBQ0YsQ0FBQztJQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixHQUFHO1FBQ3RDLElBQUksRUFBRSxjQUFjO1FBQ3BCLElBQUksRUFBRTtZQUNKLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLHdCQUFjLENBQUMsdUJBQWEsQ0FBQyxFQUFFO1lBQ2hELEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7U0FDM0I7UUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDN0IsT0FBTyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsQ0FBQztLQUNGLENBQUM7SUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRztRQUN0QyxJQUFJLEVBQUUsY0FBYztRQUNwQixJQUFJLEVBQUU7WUFDSixHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSx3QkFBYyxDQUFDLHVCQUFhLENBQUMsRUFBRTtTQUNqRDtRQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQy9CLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzdCLE9BQU8sZUFBZSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsa0JBQWUsbUJBQW1CLENBQUMifQ==